name: CI
trigger:
  change:
  manual:
    types: ["create", "push", "submit"]
jobs:
  scm_build:
    name: Build binary (for clang11 ch_vanilla_debian_ci)
    image: hub.byted.org/data-ci-debian:latest
    runs-on:
      spec: m1.4xlarge
      env: online
    steps:
      - uses: actions/scm
        id: scm_build
        inputs:
          scm_repo: dp/clickhouse/ch_vanilla_clang_ci
          version_type: test
          sync_bvc: false
          sync_aws: false
          sync_oss: false
          envs: {CUSTOM_CMAKE_BUILD_TYPE: "Release"}


  test0:
    name: CNCH - FuntionalStateless
    depends: [scm_build]
    runs-on:
      linux: {}
    image: debian_buster:1.0.0
    steps:
      - &action_checkout
        uses: actions/checkout
        inputs:
          depth: 1
      - &scm_download
        name: SCM Download
        commands:
          - echo $(pwd)
          - mkdir /CI/
          - cd /CI/
          - SCM_VERSION=${{ Jobs["scm_build"].Steps["scm_build"].Outputs["version"] }}
          # - SCM_VERSION=1.0.0.9909
          - wget -q -O scm.tar.gz http://d.scm.byted.org/api/v2/download/ceph:dp.clickhouse.ch_vanilla_clang_ci_$SCM_VERSION.tar.gz
          - mkdir cnch
          - tar -zvxf scm.tar.gz -C ./cnch/
      - &create_simple_cluster
        name: Create CNCH Cluster
        continue-on-error: false
        commands:
          - cd /CI/
          - apt-get update && apt-get -y install moreutils curl
          - cp -r /home/code/docker/CI/* ./
          - cp /home/code/docker/CI/.env ./
          - sed -i 's/ci\_cnch\_binary\_path/.\/cnch\/usr\/bin\//g' .env
          - sed -i 's/ci\_foundationdb\_path/.\/cnch\/lib\//g' .env
          - export http_proxy=10.20.47.147:3128  https_proxy=10.20.47.147:3128 no_proxy=code.byted.org
          - docker-compose up -d
          - sleep 10
          - hdfs/create_users.sh
          - curl --retry 10 --retry-delay 5 --retry-connrefused --retry-max-time 120 --max-time 120 localhost:8123
      - &prepare_stateless_queries
        name: Prepare queries
        continue-on-error: true
        commands:
          - cd /CI/
          - cp -r /home/code/docker/test/stateless/process_functional_tests_result.py ./
          - cp -r /home/code/tests/clickhouse-test ./
          - mkdir queries
          - cp -r /home/code/tests/queries/4_cnch_stateless queries/
          - cp -r /home/code/tests/queries/shell_config.sh queries/
          - mkdir queries_no_tenant
          - cp -r /home/code/tests/queries/4_cnch_stateless_no_tenant queries_no_tenant/
          - cp -r /home/code/tests/queries/shell_config.sh queries_no_tenant/
          - mkdir -p test_output
      - &run_tests
        name: Run tests
        continue-on-error: true
        commands:
          - cd /CI/
          - export PATH=$PATH:/CI/cnch/bin/
          - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/CI/cnch/lib/
          - export EXTRA_OPTIONS='enable_optimizer_fallback=0 enable_optimizer_white_list=0'
          - export TENANT_ID="1234"
          - export TENANT_DB_PREFIX="${TENANT_ID}."
          - export TENANT_DEFAULT_DB_PREFIX="${TENANT_ID}\`"
          - export TENANT_DEFAULT_DB_PREFIX_INQUOTE="${TENANT_ID}\\\`"
          - export TENANT_HTTP_DEFAULT_DB_PREFIX="${TENANT_ID}%60"
          - find ./queries  -name *.sql |xargs -I {}  sed -i "s/\${TENANT_DB_PREFIX}/$TENANT_DB_PREFIX/" {}
          - find ./queries  -name *.reference |xargs -I {}  sed -i "s/\${TENANT_DB_PREFIX}/$TENANT_DB_PREFIX/" {}
          - ./clickhouse-test --tenant_id $TENANT_ID --stop --hung-check --jobs 8 --order asc --print-time --client-option ${EXTRA_OPTIONS} tenant_id=$TENANT_ID 2>&1 | ts '%Y-%m-%d %H:%M:%S' | tee -a test_output/test_result.txt
          - echo "Running test without tenant information"
          - unset TENANT_ID
          - unset TENANT_DB_PREFIX
          - unset TENANT_DEFAULT_DB_PREFIX
          - unset TENANT_DEFAULT_DB_PREFIX_INQUOTE
          - unset TENANT_HTTP_DEFAULT_DB_PREFIX
          - ./clickhouse-test --queries "queries_no_tenant" --stop --hung-check --jobs 8 --order asc --print-time --client-option ${EXTRA_OPTIONS} 2>&1 | ts '%Y-%m-%d %H:%M:%S' | tee -a test_output/test_result_no_tenant.txt
          - ./process_functional_tests_result.py || echo -e "failure\tCannot parse results" > test_output/check_status.tsv
      - &after_test
        name: After test
        continue-on-error: true
        commands:
          # - bash /home/code/.codebase/ci_scripts/common_component/copy_core_to_shared.sh || true # copy core to artifact folder
          # - bash /home/code/.codebase/ci_scripts/common_component/copy_case_stdout_to_shared.sh || true # copy stdout to artifact folder
          - mv /CI/test_output /Artifacts  && tar --warning=no-file-changed -zcf  /Artifacts.tar.gz /Artifacts/*  || true
          - bash /home/code/.codebase/ci_scripts/common_component/block_ci.sh || true # check block_ci_flag
      - &upload_artifact
        name: Upload Artifact
        uses: actions/upload-artifact
        inputs:
          name: Artifacts
          path: /Artifacts.tar.gz
      - &analyse_result
        name: Analyse Result
        commands:
          - /bin/bash /home/code/docker/test/result.sh


  test1:
    name: CNCH - FuntionalStateless (multi-workers)
    depends: [scm_build]
    runs-on:
      linux: {}
    image: debian_buster:1.0.0
    steps:
      - *action_checkout
      - *scm_download
      - &create_multi_worker_cluster
        name: Create CNCH Cluster
        continue-on-error: false
        commands:
          - cd /CI/
          - apt-get update && apt-get -y install moreutils curl
          - cp -r /home/code/docker/CI/* ./
          - cp /home/code/docker/CI/.env ./
          - sed -i 's/ci\_cnch\_binary\_path/.\/cnch\/usr\/bin\//g' .env
          - sed -i 's/ci\_foundationdb\_path/.\/cnch\/lib\//g' .env
          - export http_proxy=10.20.47.147:3128  https_proxy=10.20.47.147:3128 no_proxy=code.byted.org
          - docker-compose -f docker-compose.yml.multiworkers up -d
          - sleep 10
          - hdfs/create_users.sh
          - curl --retry 10 --retry-delay 5 --retry-connrefused --retry-max-time 120 --max-time 120 localhost:8123
      - *prepare_stateless_queries
      - name: Temporary skip failed tests #TODO: remove me
        commands:
          - cd /CI/
          - rm -rf queries/4_cnch_stateless/00203_full_join.sql queries/4_cnch_stateless/32413_window_rownumber_order_by.sql queries/4_cnch_stateless/32413_window_function_test.sql queries/4_cnch_stateless/40007_outer_join_to_inner_join.sql
      - *run_tests
      - *after_test
      - *upload_artifact
      - *analyse_result


  test2:
    name: CNCH - FuntionalStateless (multi-workers + optimizer)
    depends: [scm_build]
    runs-on:
      linux: {}
    image: debian_buster:1.0.0
    steps:
      - *action_checkout
      - *scm_download
      - *create_multi_worker_cluster
      - *prepare_stateless_queries
      - &run_tests_with_optimizer
        name: Run tests
        continue-on-error: true
        commands:
          - cd /CI/
          - export PATH=$PATH:/CI/cnch/bin/
          - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/CI/cnch/lib/
          - export EXTRA_OPTIONS='enable_optimizer_fallback=0 enable_optimizer_white_list=0'
          - export TENANT_ID="1234"
          - export TENANT_DB_PREFIX="${TENANT_ID}."
          - export TENANT_DEFAULT_DB_PREFIX="${TENANT_ID}\`"
          - export TENANT_DEFAULT_DB_PREFIX_INQUOTE="${TENANT_ID}\\\`"
          - export TENANT_HTTP_DEFAULT_DB_PREFIX="${TENANT_ID}%60"
          - find ./queries  -name *.sql |xargs -I {}  sed -i "s/\${TENANT_DB_PREFIX}/$TENANT_DB_PREFIX/" {}
          - find ./queries  -name *.reference |xargs -I {}  sed -i "s/\${TENANT_DB_PREFIX}/$TENANT_DB_PREFIX/" {}
          - ./clickhouse-test --tenant_id $TENANT_ID --stop --hung-check --jobs 8 --order asc --print-time --client-option ${EXTRA_OPTIONS} enable_optimizer=1 tenant_id=$TENANT_ID 2>&1 | ts '%Y-%m-%d %H:%M:%S' | tee -a test_output/test_result.txt
          - echo "Running test without tenant information"
          - unset TENANT_ID
          - unset TENANT_DB_PREFIX
          - unset TENANT_DEFAULT_DB_PREFIX
          - unset TENANT_DEFAULT_DB_PREFIX_INQUOTE
          - unset TENANT_HTTP_DEFAULT_DB_PREFIX
          - ./clickhouse-test --queries "queries_no_tenant" --stop --hung-check --jobs 8 --order asc --print-time --client-option ${EXTRA_OPTIONS} enable_optimizer=1 2>&1 | ts '%Y-%m-%d %H:%M:%S' | tee -a test_output/test_result.txt
          - ./process_functional_tests_result.py || echo -e "failure\tCannot parse results" > test_output/check_status.tsv
      - *after_test
      - *upload_artifact
      - &analyse_result_ignore_fail
        name: Analyse Result
        ignore-error: true
        commands:
          - /bin/bash /home/code/docker/test/result.sh

  test3:
    name: CNCH - FuntionalStateless (multi-workers + ANSI)
    depends: [scm_build]
    runs-on:
      linux: {}
    image: debian_buster:1.0.0
    steps:
      - *action_checkout
      - *scm_download
      - *create_multi_worker_cluster
      - *prepare_stateless_queries
      - &run_tests_with_ansi
        name: Run tests
        continue-on-error: true
        commands:
          - cd /CI/
          - export PATH=$PATH:/CI/cnch/bin/
          - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/CI/cnch/lib/
          - export EXTRA_OPTIONS='enable_optimizer_fallback=0 enable_optimizer_white_list=0'
          - export TENANT_ID="1234"
          - export TENANT_DB_PREFIX="${TENANT_ID}."
          - export TENANT_DEFAULT_DB_PREFIX="${TENANT_ID}\`"
          - export TENANT_DEFAULT_DB_PREFIX_INQUOTE="${TENANT_ID}\\\`"
          - export TENANT_HTTP_DEFAULT_DB_PREFIX="${TENANT_ID}%60"
          - find ./queries  -name *.sql |xargs -I {}  sed -i "s/\${TENANT_DB_PREFIX}/$TENANT_DB_PREFIX/" {}
          - find ./queries  -name *.reference |xargs -I {}  sed -i "s/\${TENANT_DB_PREFIX}/$TENANT_DB_PREFIX/" {}
          - ./clickhouse-test --tenant_id $TENANT_ID --stop --hung-check --jobs 8 --order desc --print-time --client-option ${EXTRA_OPTIONS} dialect_type=ANSI tenant_id=$TENANT_ID 2>&1 | ts '%Y-%m-%d %H:%M:%S' | tee -a test_output/test_result.txt
          - echo "Running test without tenant information"
          - unset TENANT_ID
          - unset TENANT_DB_PREFIX
          - unset TENANT_DEFAULT_DB_PREFIX
          - unset TENANT_DEFAULT_DB_PREFIX_INQUOTE
          - unset TENANT_HTTP_DEFAULT_DB_PREFIX
          - ./clickhouse-test --queries "queries_no_tenant" --stop --hung-check --jobs 8 --order desc --print-time --client-option ${EXTRA_OPTIONS} dialect_type=ANSI 2>&1 | ts '%Y-%m-%d %H:%M:%S' | tee -a test_output/test_result.txt
          - ./process_functional_tests_result.py || echo -e "failure\tCannot parse results" > test_output/check_status.tsv
      - *after_test
      - *upload_artifact
      - *analyse_result_ignore_fail


  test4:
    name: CNCH - FuntionalStateless (multi-workers + ClickhouseSQL + w/w.o optimizer)
    depends: [scm_build]
    runs-on:
      linux: {}
    image: debian_buster:1.0.0
    steps:
      - &action_checkout
        uses: actions/checkout
        inputs:
          depth: 1
      - *scm_download
      - *create_multi_worker_cluster
      - &prepare_clickhousesql_queries
        name: Prepare queries
        continue-on-error: true
        commands:
          - cd /CI/
          - cp -r /home/code/docker/test/stateless/process_functional_tests_result.py ./
          - cp -r /home/code/tests/clickhouse-test ./
          - mkdir queries
          - cp -r /home/code/tests/queries/7_clickhouse_sql queries/
          - cp -r /home/code/tests/queries/shell_config.sh queries/
          - mkdir -p test_output
      - &run_tests_with_and_without_optimizer
        name: Run tests
        continue-on-error: true
        commands:
          - cd /CI/
          - export PATH=$PATH:/CI/cnch/bin/
          - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/CI/cnch/lib/
          - export EXTRA_OPTIONS='enable_optimizer_fallback=0 enable_optimizer_white_list=0'
          - export TENANT_ID="1234"
          - export TENANT_DB_PREFIX="${TENANT_ID}."
          - export TENANT_DEFAULT_DB_PREFIX="${TENANT_ID}\`"
          - export TENANT_DEFAULT_DB_PREFIX_INQUOTE="${TENANT_ID}\\\`"
          - export TENANT_HTTP_DEFAULT_DB_PREFIX="${TENANT_ID}%60"
          - find ./queries  -name *.sql |xargs -I {}  sed -i "s/\${TENANT_DB_PREFIX}/$TENANT_DB_PREFIX/" {}
          - find ./queries  -name *.reference |xargs -I {}  sed -i "s/\${TENANT_DB_PREFIX}/$TENANT_DB_PREFIX/" {}
          - echo "Running test without optimizer"
          - ./clickhouse-test --tenant_id $TENANT_ID --stop --hung-check --jobs 1 --order asc --print-time --client-option ${EXTRA_OPTIONS} tenant_id=$TENANT_ID 2>&1 | ts '%Y-%m-%d %H:%M:%S' | tee -a test_output/test_result.txt
          - echo "Running test with optimizer"
          - ./clickhouse-test --tenant_id $TENANT_ID --stop --hung-check --jobs 1 --order asc --print-time --client-option ${EXTRA_OPTIONS} enable_optimizer=1 tenant_id=$TENANT_ID 2>&1 | ts '%Y-%m-%d %H:%M:%S' | tee -a test_output/test_result.txt
          - echo "Running test without tenant information"
          - unset TENANT_ID
          - unset TENANT_DB_PREFIX
          - unset TENANT_DEFAULT_DB_PREFIX
          - unset TENANT_DEFAULT_DB_PREFIX_INQUOTE
          - unset TENANT_HTTP_DEFAULT_DB_PREFIX
          - echo "Running test without optimizer"
          - ./clickhouse-test --queries "queries_no_tenant" --stop --hung-check --jobs 1 --order asc --print-time --client-option ${EXTRA_OPTIONS} 2>&1 | ts '%Y-%m-%d %H:%M:%S' | tee -a test_output/test_result.txt
          - echo "Running test with optimizer"
          - ./clickhouse-test --queries "queries_no_tenant" --stop --hung-check --jobs 1 --order asc --print-time --client-option ${EXTRA_OPTIONS} enable_optimizer=1 2>&1 | ts '%Y-%m-%d %H:%M:%S' | tee -a test_output/test_result.txt
          - ./process_functional_tests_result.py || echo -e "failure\tCannot parse results" > test_output/check_status.tsv
      - *after_test
      - *upload_artifact
      - *analyse_result_ignore_fail


  test5:
    name: CNCH - CertificateStateful
    depends: [scm_build]
    runs-on:
      linux: {}
    image: debian_buster:1.0.0
    steps:
      - *action_checkout
      - *scm_download
      - *create_simple_cluster
      - name: Prepare data and queries
        continue-on-error: true
        commands:
          - cd /CI/
          - export PATH=$PATH:/CI/cnch/bin/
          - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/CI/cnch/lib/
          - export EXTRA_OPTIONS='enable_optimizer_fallback=0 enable_optimizer_white_list=0'
          - export TENANT_ID="1234"
          - export TENANT_DB_PREFIX="${TENANT_ID}."
          - export TENANT_DEFAULT_DB_PREFIX="${TENANT_ID}\`"
          - export TENANT_DEFAULT_DB_PREFIX_INQUOTE="${TENANT_ID}\\\`"
          - export TENANT_HTTP_DEFAULT_DB_PREFIX="${TENANT_ID}%60"
          - cp -r /home/code/docker/test/certificate/* ./
          - |
            echo "Load tables for certificate - first batch"
            python3 load_certificate_tables.py --suite-path /home/code/tests/queries/3_1_certificate_aeolus_bp_edu &
            python3 load_certificate_tables.py --suite-path /home/code/tests/queries/3_2_certificate_aeolus_delta &
            python3 load_certificate_tables.py --suite-path /home/code/tests/queries/3_3_certificate_datarocks &
            wait
            echo "Load tables for certificate - second batch"
            python3 load_certificate_tables.py --suite-path /home/code/tests/queries/3_4_certificate_deepinsight &
            python3 load_certificate_tables.py --suite-path /home/code/tests/queries/3_5_certificate_ecom_data &
            python3 load_certificate_tables.py --suite-path /home/code/tests/queries/3_6_certificate_libra_hl &
            wait
            echo "Load tables for certificate - last batch"
            python3 load_certificate_tables.py --suite-path /home/code/tests/queries/3_7_certificate_motor_dzx &
            wait
            echo "Load tables for certificates done"
          - cp /home/code/docker/test/stateless/process_functional_tests_result.py process_functional_tests_result.py
          - cp -r /home/code/tests/clickhouse-test ./
          - mkdir queries
          - cp -r /home/code/tests/queries/3_1_certificate_aeolus_bp_edu queries/
          - cp -r /home/code/tests/queries/3_2_certificate_aeolus_delta queries/
          - cp -r /home/code/tests/queries/3_3_certificate_datarocks queries/
          - cp -r /home/code/tests/queries/3_7_certificate_motor_dzx queries/
          - cp -r /home/code/tests/queries/shell_config.sh queries/
          - find ./queries  -name *.sql |xargs -I {}  sed -i "s/\${TENANT_DB_PREFIX}/$TENANT_DB_PREFIX/" {}
          - find ./queries  -name *.reference |xargs -I {}  sed -i "s/\${TENANT_DB_PREFIX}/$TENANT_DB_PREFIX/" {}
          - mkdir -p test_output
      - *run_tests
      - *after_test
      - *upload_artifact
      - *analyse_result


  test6:
    name: CNCH - SSB + TPCDS
    depends: [scm_build]
    runs-on:
      linux: {}
    image: debian_buster:1.0.0
    steps:
      - *action_checkout
      - *scm_download
      - *create_multi_worker_cluster
      - name: Creating SSB tables
        continue-on-error: false
        commands:
          - cd /CI/
          - export PATH=$PATH:/CI/cnch/bin/
          - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/CI/cnch/lib/
          - export EXTRA_OPTIONS='enable_optimizer_fallback=0 enable_optimizer_white_list=0'
          - cp -r /home/code/tests/queries/ssb/* ./
          - export TENANT_ID="1234"
          - export TENANT_DB_PREFIX="${TENANT_ID}."
          - export TENANT_DEFAULT_DB_PREFIX="${TENANT_ID}\`"
          - export TENANT_DEFAULT_DB_PREFIX_INQUOTE="${TENANT_ID}\\\`"
          - export TENANT_HTTP_DEFAULT_DB_PREFIX="${TENANT_ID}%60"
          - ./ssb_import.sh
          - mkdir -p test_output
      - name: Run SSB queries
        continue-on-error: false
        commands:
          - cd /CI/
          - export PATH=$PATH:/CI/cnch/bin/
          - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/CI/cnch/lib/
          - export EXTRA_OPTIONS='enable_optimizer_fallback=0 enable_optimizer_white_list=0'
          - export TENANT_ID="1234"
          - export TENANT_DB_PREFIX="${TENANT_ID}."
          - export TENANT_DEFAULT_DB_PREFIX="${TENANT_ID}\`"
          - export TENANT_DEFAULT_DB_PREFIX_INQUOTE="${TENANT_ID}\\\`"
          - export TENANT_HTTP_DEFAULT_DB_PREFIX="${TENANT_ID}%60"
          - cp /home/code/docker/test/stateless/process_functional_tests_result.py process_functional_tests_result.py
          - cp -r /home/code/tests/clickhouse-test ./
          - mkdir queries
          - cp -r /home/code/tests/queries/5_ssb queries/
          - find ./queries  -name *.sql |xargs -I {}  sed -i "s/\${TENANT_DB_PREFIX}/$TENANT_DB_PREFIX/" {}
          - find ./queries  -name *.reference |xargs -I {}  sed -i "s/\${TENANT_DB_PREFIX}/$TENANT_DB_PREFIX/" {}
          - echo "Run SSB without CBO"
          - ./clickhouse-test --tenant_id $TENANT_ID --database ssb --stop --hung-check --jobs 4 --order asc --print-time --client-option ${EXTRA_OPTIONS} enable_optimizer=1 tenant_id=$TENANT_ID 2>&1 | ts '%Y-%m-%d %H:%M:%S' | tee -a test_output/test_result.txt
          - echo "Creating statistic"
          - clickhouse-client --tenant_id $TENANT_ID --database "${TENANT_ID}\`ssb" --query "CREATE STATS IF NOT EXISTS ALL"
          - echo "Run SSB with CBO"
          - ./clickhouse-test --tenant_id $TENANT_ID --database ssb --stop --hung-check --jobs 4 --order asc --print-time --client-option ${EXTRA_OPTIONS} enable_optimizer=1 tenant_id=$TENANT_ID 2>&1 | ts '%Y-%m-%d %H:%M:%S' | tee -a test_output/test_result.txt
          - echo "Creating flat table"
          - clickhouse-client --tenant_id $TENANT_ID --database "${TENANT_ID}\`ssb" --multiquery --time < ssb_flat_ddl.sql
          - rm -r queries/5_ssb/
          - cp -r /home/code/tests/queries/5_ssb_flat queries/
          - echo "Run SSB FLAT"
          - find ./queries  -name *.sql |xargs -I {}  sed -i "s/\${TENANT_DB_PREFIX}/$TENANT_DB_PREFIX/" {}
          - find ./queries  -name *.reference |xargs -I {}  sed -i "s/\${TENANT_DB_PREFIX}/$TENANT_DB_PREFIX/" {}
          - ./clickhouse-test --tenant_id $TENANT_ID --database ssb --stop --hung-check --jobs 4 --order asc --print-time --client-option ${EXTRA_OPTIONS} tenant_id=$TENANT_ID 2>&1 | ts '%Y-%m-%d %H:%M:%S' | tee -a test_output/test_result.txt
          - ./process_functional_tests_result.py || echo -e "failure\tCannot parse results" > test_output/check_status.tsv
      - name: Creating TPCDS tables
        continue-on-error: false
        commands:
          - apt-get install -y gcc make flex bison byacc git time
          - cd /CI/
          - export PATH=$PATH:/CI/cnch/bin/
          - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/CI/cnch/lib/
          - export TENANT_ID="1234"
          - export TENANT_DB_PREFIX="${TENANT_ID}."
          - export TENANT_DEFAULT_DB_PREFIX="${TENANT_ID}\`"
          - export TENANT_DEFAULT_DB_PREFIX_INQUOTE="${TENANT_ID}\\\`"
          - export TENANT_HTTP_DEFAULT_DB_PREFIX="${TENANT_ID}%60"
          - cp -r /home/code/tests/queries/tpcds/* ./
          - git clone https://code.byted.org/bytehouse/tpcds-v2.13.0rc1.git
          - cp config.sh.tpl config.sh
          - chmod a+x *.sh
          - ./build.sh
          - ./gen_data.sh 1 16
          - ./populate_data.sh 1
      - name: Run TPCDS queries (ANSI)
        continue-on-error: false
        commands:
        - cd /CI/
        - export PATH=$PATH:/CI/cnch/bin/
        - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/CI/cnch/lib/
        - export EXTRA_OPTIONS='enable_optimizer_fallback=0 enable_optimizer_white_list=0'
        - export TENANT_ID="1234"
        - export TENANT_DB_PREFIX="${TENANT_ID}."
        - export TENANT_DEFAULT_DB_PREFIX="${TENANT_ID}\`"
        - export TENANT_DEFAULT_DB_PREFIX_INQUOTE="${TENANT_ID}\\\`"
        - export TENANT_HTTP_DEFAULT_DB_PREFIX="${TENANT_ID}%60"
        - rm -rf queries/*
        - cp -r /home/code/tests/queries/6_tpcds queries/
        - rm -rf queries/6_tpcds/90.sql queries/6_tpcds/98.sql queries/6_tpcds/70.sql queries/6_tpcds/72.sql #fix me
        - find ./queries  -name *.sql |xargs -I {}  sed -i "s/\${TENANT_DB_PREFIX}/$TENANT_DB_PREFIX/" {}
        - find ./queries  -name *.reference |xargs -I {}  sed -i "s/\${TENANT_DB_PREFIX}/$TENANT_DB_PREFIX/" {}
        - echo "Run TPCDS without CBO"
        - ./clickhouse-test --tenant_id $TENANT_ID --database tpcds1 --stop --hung-check --jobs 4 --order asc --print-time --client-option ${EXTRA_OPTIONS} enable_optimizer=1 dialect_type=ANSI tenant_id=$TENANT_ID format=Null 2>&1 | ts '%Y-%m-%d %H:%M:%S' | tee -a test_output/test_result.txt
        - echo "Creating statistic"
        - clickhouse-client --tenant_id $TENANT_ID --database "${TENANT_ID}\`tpcds1" --query "CREATE STATS IF NOT EXISTS ALL"
        - echo "Run TPCDS with CBO"
        - ./clickhouse-test --tenant_id $TENANT_ID --database tpcds1 --stop --hung-check --jobs 4 --order asc --print-time --client-option ${EXTRA_OPTIONS} enable_optimizer=1 dialect_type=ANSI tenant_id=$TENANT_ID format=Null 2>&1 | ts '%Y-%m-%d %H:%M:%S' | tee -a test_output/test_result.txt
        - ./process_functional_tests_result.py || echo -e "failure\tCannot parse results" > test_output/check_status.tsv
      - *after_test
      - *upload_artifact
      - *analyse_result

  test7:
    name: CNCH - ExternalTable
    depends: [scm_build]
    image: hub.byted.org/bytehouse/clickhouse-stateless-test:gdb12.1v1
    runs-on:
      spec: m1.4xlarge
      env: online
    envs:
      CONSUL_HTTP_HOST: "10.130.48.226"
      CONSUL_HTTP_PORT: "2280"
      PATH: "$PATH:/opt/tiger/yarn_deploy/hadoop/bin:/opt/tiger/consul_deploy/bin/go:/clickhouse/bin:/clickhouse/usr/breakpad/bin:/opt/tiger/bvc/bin:/opt/tiger/foundationdb/bin"
      LD_LIBRARY_PATH: "/clickhouse/lib/:$LD_LIBRARY_PATH"
      MY_HOST_IP: "127.0.0.1"
      BYTED_HOST_IP: "127.0.0.1"
      RUNTIME_IDC_NAME: "lf"
      INFSEC_HADOOP_ENABLED: "1"
      INFSEC_HADDOP_ENABLED: "1"
      SEC_TOKEN_PATH: "/token"
      HDFS_PATH_ROOT: "/home/byte_dp_cnch_lf/cicd"
    steps:
      - *action_checkout
      - &doas
        id: doas
        uses: actions/doas
      - &scm_download_with_fdb
        name: Download from SCM
        commands:
          - echo $(pwd)
          - cd /
          - CLICKHOUSE_VERSION=${{ Jobs["scm_build"].Steps["scm_build"].Outputs["version"] }}
          # - CLICKHOUSE_VERSION=1.0.0.9909
          - CLICKHOUSE_PREFIX="clickhouse"
          - wget -q -O scm.tar.gz http://d.scm.byted.org/api/v2/download/ceph:dp.clickhouse.ch_vanilla_clang_ci_$CLICKHOUSE_VERSION.tar.gz
          - mkdir -p $CLICKHOUSE_PREFIX
          - wget -q -O $CLICKHOUSE_PREFIX/clickhouse.tar.gz http://d.scm.byted.org/api/v2/download/ceph:dp.clickhouse.ch_vanilla_clang_ci_$CLICKHOUSE_VERSION.tar.gz
          - tar zxf $CLICKHOUSE_PREFIX/clickhouse.tar.gz  --directory clickhouse
          - rm $CLICKHOUSE_PREFIX/clickhouse.tar.gz
          - bash /home/code/docker/test/foundationdb/start_fdb.sh
      - name: Run tests
        continue-on-error: true
        commands:
          - cd /
          - bash /home/code/.codebase/ci_scripts/cnch_config/1_single_server/cluster_up.sh
          - bash /home/code/docker/test/foundationdb/show_fdb.sh
          - export EXTRA_OPTIONS='enable_optimizer_fallback=0 enable_optimizer_white_list=0'
          - export ADDITIONAL_OPTIONS='--jobs 4 --run cnch_stateless'
          - export TENANT_ID="1234"
          - export TENANT_DB_PREFIX="${TENANT_ID}."
          - export TENANT_DEFAULT_DB_PREFIX="${TENANT_ID}\`"
          - export TENANT_DEFAULT_DB_PREFIX_INQUOTE="${TENANT_ID}\\\`"
          - export TENANT_HTTP_DEFAULT_DB_PREFIX="${TENANT_ID}%60"
          - cp -r /home/code/docker/test/stateless/* .
          - mkdir -p /CI/
          - mkdir -p /test_output/
          - find /home/code/tests/queries  -name *.sql |xargs -I {}  sed -i "s/\${TENANT_DB_PREFIX}/$TENANT_DB_PREFIX/" {}
          - find /home/code/tests/queries  -name *.reference |xargs -I {}  sed -i "s/\${TENANT_DB_PREFIX}/$TENANT_DB_PREFIX/" {}
          - clickhouse-test --tenant_id $TENANT_ID --stop --print-time --order asc -q /home/code/tests/queries --jobs 4 --run cnch_external_table --client-option ${EXTRA_OPTIONS} tenant_id=$TENANT_ID 2>&1 | ts '%Y-%m-%d %H:%M:%S' | tee /test_output/test_result.txt || true
          - ./process_functional_tests_result.py || echo -e "failure\tCannot parse results" > /test_output/check_status.tsv
          - mv /test_output/ /CI/
      - *after_test
      - *upload_artifact
      - *analyse_result
