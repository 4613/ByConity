Projection Est. 0 rows, cost 4.8e-01
│     Expressions: [block_number], gas_fee:=`sum(multiply(gas, gas_price))`
└─ Limit Est. 0 rows, cost 4.8e-01
   │     Limit: 10
   └─ Projection Est. 0 rows, cost 4.8e-01
      │     Expressions: block_number:=block_number_4, sum(multiply(gas, gas_price)):=`sumMerge()(gas_fee)`
      └─ Sorting Est. 0 rows, cost 4.8e-01
         │     Order by: {block_number_4 asc}
         │     Limit: 10
         └─ Gather Exchange Est. 0 rows, cost 4.8e-01
            └─ Sorting Est. 0 rows, cost 3.2e-01
               │     Order by: {block_number_4 asc}
               │     Limit: 10
               └─ MergingAggregated Est. 0 rows, cost 3.2e-01
                  └─ Repartition Exchange Est. 0 rows, cost 3.2e-01
                     │     Partition by: {block_number_4}
                     └─ Aggregating Est. 0 rows, cost 0.0e+00
                        │     Group by: {block_number_4}
                        │     Aggregates: sumMerge()(gas_fee):=sumMerge(gas_fee)
                        └─ Projection Est. 0 rows, cost 0.0e+00
                           │     Expressions: [gas_fee], block_number_4:=block_number
                           └─ TopNFiltering Est. 0 rows, cost 0.0e+00
                              │     Order by: {block_number asc}
                              │     Size: 10
                              └─ TableScan block_number_agg_sum_hit_mv_target Est. 0 rows, cost 0.0e+00
                                       Outputs: [block_number, gas_fee]
note: Materialized Views is applied for 1 times: block_number_agg_sum_hit_mv_target.
Projection Est. 12 rows, cost 1.4e+01
│     Expressions: block_number:=block_number_2, func_sign:=substring(input_2, 1, 8), transaction_hash:=transaction_hash_2
└─ Limit Est. 12 rows, cost 1.3e+01
   │     Limit: 100
   └─ Sorting Est. 12 rows, cost 1.3e+01
      │     Order by: {block_number_2 desc nulls_last, transaction_index_2 desc nulls_last}
      │     Limit: 100
      └─ Gather Exchange Est. 12 rows, cost 1.3e+01
         └─ Sorting Est. 12 rows, cost 1.1e+01
            │     Order by: {block_number_2 desc nulls_last, transaction_index_2 desc nulls_last}
            │     Limit: 100
            └─ Union Est. 12 rows, cost 1.1e+01
               ├─ Projection Est. 6 rows, cost 5.3e+00
               │  │     Expressions: [block_number, input, transaction_hash, transaction_index]
               │  └─ Filter Est. 6 rows, cost 4.9e+00
               │     │     Condition: from_address = \'0xdb03b11f5666d0e51934b43bd830ff070497ff8c\'
               │     └─ TableScan tx_from_address_hit_mv_target Est. 6 rows, cost 4.4e+00
               │              Where: from_address = \'0xdb03b11f5666d0e51934b43bd830ff070497ff8c\'
               │              Outputs: [block_number, from_address, input, transaction_hash, transaction_index]
               └─ Projection Est. 6 rows, cost 5.3e+00
                  │     Expressions: block_number_1:=block_number, input_1:=input, transaction_hash_1:=transaction_hash, transaction_index_1:=transaction_index
                  └─ Filter Est. 6 rows, cost 4.9e+00
                     │     Condition: to_address = \'0xdb03b11f5666d0e51934b43bd830ff070497ff8c\'
                     └─ TableScan tx_to_address_hit_mv_target Est. 6 rows, cost 4.4e+00
                              Where: to_address = \'0xdb03b11f5666d0e51934b43bd830ff070497ff8c\'
                              Outputs: [block_number, input, to_address, transaction_hash, transaction_index]
note: Materialized Views is applied for 2 times: tx_from_address_hit_mv_target, tx_to_address_hit_mv_target.
