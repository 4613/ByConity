Projection est. 100 rows
│     Expressions: sum(sales):=`expr#sum(sales)`
└─ Limit est. 100 rows
   │     Limit: 100
   └─ MergingAggregated est. ? rows
      └─ Gather Exchange est. ? rows
         └─ Aggregating est. ? rows
            │     Group by: {}
            │     Aggregates: expr#sum(sales):=AggNull(sum)(expr#multiply(cs_quantity, cs_list_price)_1)
            └─ Union est. ? rows
               ├─ Projection est. ? rows
               │  │     Expressions: expr#multiply(cs_quantity, cs_list_price):=cs_quantity * cs_list_price
               │  └─ Inner Join est. ? rows
               │     │     Condition: cs_bill_customer_sk == c_customer_sk_2
               │     ├─ Repartition Exchange est. ? rows
               │     │  │     Partition by: {cs_bill_customer_sk}
               │     │  └─ Inner Join est. ? rows
               │     │     │     Condition: cs_item_sk == i_item_sk_1
               │     │     ├─ Repartition Exchange est. ? rows
               │     │     │  │     Partition by: {cs_item_sk}
               │     │     │  └─ Inner Join est. ? rows
               │     │     │     │     Condition: cs_sold_date_sk == d_date_sk
               │     │     │     ├─ Repartition Exchange est. ? rows
               │     │     │     │  │     Partition by: {cs_sold_date_sk}
               │     │     │     │  └─ Filter est. ? rows
               │     │     │     │     │     Condition: isNotNull(cs_item_sk) AND isNotNull(cs_bill_customer_sk)
               │     │     │     │     └─ TableScan tpcds.catalog_sales est. ? rows
               │     │     │     │              Outputs: [cs_bill_customer_sk, cs_item_sk, cs_list_price, cs_quantity, cs_sold_date_sk]
               │     │     │     └─ Repartition Exchange est. ? rows
               │     │     │        │     Partition by: {d_date_sk}
               │     │     │        └─ Filter est. ? rows
               │     │     │           │     Condition: (d_moy = 2) AND (d_year = 2000)
               │     │     │           └─ TableScan tpcds.date_dim est. ? rows
               │     │     │                    Outputs: [d_date_sk, d_moy, d_year]
               │     │     └─ Aggregating est. ? rows
               │     │        │     Group by: {i_item_sk_1}
               │     │        └─ Filter est. ? rows
               │     │           │     Condition: isNotNull(i_item_sk_1)
               │     │           └─ CTERef [0] est. ? rows
               │     └─ Aggregating est. ? rows
               │        │     Group by: {c_customer_sk_2}
               │        └─ Filter est. ? rows
               │           │     Condition: isNotNull(c_customer_sk_2)
               │           └─ CTERef [1] est. ? rows
               └─ Projection est. ? rows
                  │     Expressions: expr#multiply(ws_quantity, ws_list_price):=ws_quantity * ws_list_price
                  └─ Inner Join est. ? rows
                     │     Condition: ws_bill_customer_sk == c_customer_sk_3
                     ├─ Repartition Exchange est. ? rows
                     │  │     Partition by: {ws_bill_customer_sk}
                     │  └─ Inner Join est. ? rows
                     │     │     Condition: ws_item_sk == i_item_sk_2
                     │     ├─ Repartition Exchange est. ? rows
                     │     │  │     Partition by: {ws_item_sk}
                     │     │  └─ Inner Join est. ? rows
                     │     │     │     Condition: ws_sold_date_sk == d_date_sk_3
                     │     │     ├─ Repartition Exchange est. ? rows
                     │     │     │  │     Partition by: {ws_sold_date_sk}
                     │     │     │  └─ Filter est. ? rows
                     │     │     │     │     Condition: isNotNull(ws_bill_customer_sk) AND isNotNull(ws_item_sk)
                     │     │     │     └─ TableScan tpcds.web_sales est. ? rows
                     │     │     │              Outputs: [ws_bill_customer_sk, ws_item_sk, ws_list_price, ws_quantity, ws_sold_date_sk]
                     │     │     └─ Repartition Exchange est. ? rows
                     │     │        │     Partition by: {d_date_sk_3}
                     │     │        └─ Filter est. ? rows
                     │     │           │     Condition: (d_year_3 = 2000) AND (d_moy_3 = 2)
                     │     │           └─ TableScan tpcds.date_dim est. ? rows
                     │     │                    Outputs: d_date_sk_3:=d_date_sk, d_moy_3:=d_moy, d_year_3:=d_year
                     │     └─ Aggregating est. ? rows
                     │        │     Group by: {i_item_sk_2}
                     │        └─ Filter est. ? rows
                     │           │     Condition: isNotNull(i_item_sk_2)
                     │           └─ CTERef [0] est. ? rows
                     └─ Aggregating est. ? rows
                        │     Group by: {c_customer_sk_3}
                        └─ Filter est. ? rows
                           │     Condition: isNotNull(c_customer_sk_3)
                           └─ CTERef [1] est. ? rows
CTEDef [1]
Inner Join est. ? rows
│     Condition: 
│     Filter: `expr#sum(multiply(ss_quantity, ss_sales_price))` > ('0.500000' * `expr#max(csales)`)
├─ MergingAggregated est. ? rows
│  └─ Repartition Exchange est. ? rows
│     │     Partition by: {c_customer_sk}
│     └─ Aggregating est. ? rows
│        │     Group by: {c_customer_sk}
│        │     Aggregates: expr#sum(multiply(ss_quantity, ss_sales_price)):=AggNull(sum)(expr#multiply(ss_quantity, ss_sales_price))
│        └─ Projection est. ? rows
│           │     Expressions: [c_customer_sk], expr#multiply(ss_quantity, ss_sales_price):=ss_quantity_1 * ss_sales_price_1
│           └─ Inner Join est. ? rows
│              │     Condition: ss_customer_sk_1 == c_customer_sk
│              ├─ Repartition Exchange est. ? rows
│              │  │     Partition by: {ss_customer_sk_1}
│              │  └─ Filter est. ? rows
│              │     │     Condition: isNotNull(ss_customer_sk_1)
│              │     └─ TableScan tpcds.store_sales est. ? rows
│              │              Outputs: ss_customer_sk_1:=ss_customer_sk, ss_quantity_1:=ss_quantity, ss_sales_price_1:=ss_sales_price
│              └─ Repartition Exchange est. ? rows
│                 │     Partition by: {c_customer_sk}
│                 └─ Filter est. ? rows
│                    │     Condition: isNotNull(c_customer_sk)
│                    └─ TableScan tpcds.customer est. ? rows
│                             Outputs: [c_customer_sk]
└─ Broadcast Exchange est. ? rows
   └─ MergingAggregated est. ? rows
      └─ Gather Exchange est. ? rows
         └─ Aggregating est. ? rows
            │     Group by: {}
            │     Aggregates: expr#max(csales):=AggNull(max)(expr#sum(multiply(ss_quantity, ss_sales_price))_1)
            └─ Projection est. ? rows
               │     Expressions: [expr#sum(multiply(ss_quantity, ss_sales_price))_1]
               └─ MergingAggregated est. ? rows
                  └─ Repartition Exchange est. ? rows
                     │     Partition by: {c_customer_sk_1}
                     └─ Aggregating est. ? rows
                        │     Group by: {c_customer_sk_1}
                        │     Aggregates: expr#sum(multiply(ss_quantity, ss_sales_price))_1:=AggNull(sum)(expr#multiply(ss_quantity, ss_sales_price)_1)
                        └─ Projection est. ? rows
                           │     Expressions: [c_customer_sk_1], expr#multiply(ss_quantity, ss_sales_price)_1:=ss_quantity_2 * ss_sales_price_2
                           └─ Inner Join est. ? rows
                              │     Condition: ss_sold_date_sk_2 == d_date_sk_2
                              ├─ Repartition Exchange est. ? rows
                              │  │     Partition by: {ss_sold_date_sk_2}
                              │  └─ Inner Join est. ? rows
                              │     │     Condition: ss_customer_sk_2 == c_customer_sk_1
                              │     ├─ Repartition Exchange est. ? rows
                              │     │  │     Partition by: {ss_customer_sk_2}
                              │     │  └─ TableScan tpcds.store_sales est. ? rows
                              │     │           Outputs: ss_customer_sk_2:=ss_customer_sk, ss_quantity_2:=ss_quantity, ss_sales_price_2:=ss_sales_price, ss_sold_date_sk_2:=ss_sold_date_sk
                              │     └─ Repartition Exchange est. ? rows
                              │        │     Partition by: {c_customer_sk_1}
                              │        └─ TableScan tpcds.customer est. ? rows
                              │                 Outputs: c_customer_sk_1:=c_customer_sk
                              └─ Repartition Exchange est. ? rows
                                 │     Partition by: {d_date_sk_2}
                                 └─ Filter est. ? rows
                                    │     Condition: d_year_2 IN (2000, 2001, 2002, 2003)
                                    └─ TableScan tpcds.date_dim est. ? rows
                                             Outputs: d_date_sk_2:=d_date_sk, d_year_2:=d_year
CTEDef [0]
Repartition Exchange est. ? rows
│     Partition by: {i_item_sk}
└─ Projection est. ? rows
   │     Expressions: [i_item_sk]
   └─ Filter est. ? rows
      │     Condition: `expr#count()` > 4
      └─ MergingAggregated est. ? rows
         └─ Repartition Exchange est. ? rows
            │     Partition by: {d_date_1, expr#substring(i_item_desc, 1, 30), i_item_sk}
            └─ Aggregating est. ? rows
               │     Group by: {d_date_1, expr#substring(i_item_desc, 1, 30), i_item_sk}
               │     Aggregates: expr#count():=AggNull(count)()
               └─ Projection est. ? rows
                  │     Expressions: [d_date_1, i_item_sk], expr#substring(i_item_desc, 1, 30):=substring(i_item_desc, 1, 30)
                  └─ Inner Join est. ? rows
                     │     Condition: ss_item_sk == i_item_sk
                     ├─ Repartition Exchange est. ? rows
                     │  │     Partition by: {ss_item_sk}
                     │  └─ Inner Join est. ? rows
                     │     │     Condition: ss_sold_date_sk == d_date_sk_1
                     │     ├─ Repartition Exchange est. ? rows
                     │     │  │     Partition by: {ss_sold_date_sk}
                     │     │  └─ Filter est. ? rows
                     │     │     │     Condition: isNotNull(ss_item_sk)
                     │     │     └─ TableScan tpcds.store_sales est. ? rows
                     │     │              Outputs: [ss_item_sk, ss_sold_date_sk]
                     │     └─ Repartition Exchange est. ? rows
                     │        │     Partition by: {d_date_sk_1}
                     │        └─ Filter est. ? rows
                     │           │     Condition: d_year_1 IN (2000, 2001, 2002, 2003)
                     │           └─ TableScan tpcds.date_dim est. ? rows
                     │                    Outputs: d_date_1:=d_date, d_date_sk_1:=d_date_sk, d_year_1:=d_year
                     └─ Repartition Exchange est. ? rows
                        │     Partition by: {i_item_sk}
                        └─ Filter est. ? rows
                           │     Condition: isNotNull(i_item_sk)
                           └─ TableScan tpcds.item est. ? rows
                                    Outputs: [i_item_desc, i_item_sk]
note: CTE(Common Table Expression) is applied for 4 times.
Projection est. 100 rows
│     Expressions: c_first_name:=c_first_name_6, c_last_name:=c_last_name_6, sales:=`expr#sum(multiply(cs_quantity, cs_list_price))_1`
└─ Limit est. 100 rows
   │     Limit: 100
   └─ Sorting est. ? rows
      │     Order by: {c_last_name_6 asc, c_first_name_6 asc, expr#sum(multiply(cs_quantity, cs_list_price))_1 asc}
      │     Limit: 100
      └─ Gather Exchange est. ? rows
         └─ Sorting est. ? rows
            │     Order by: {c_last_name_6 asc, c_first_name_6 asc, expr#sum(multiply(cs_quantity, cs_list_price))_1 asc}
            │     Limit: 100
            └─ Union est. ? rows
               ├─ MergingAggregated est. ? rows
               │  └─ Repartition Exchange est. ? rows
               │     │     Partition by: {c_first_name_2, c_last_name_2}
               │     └─ Aggregating est. ? rows
               │        │     Group by: {c_first_name_2, c_last_name_2}
               │        │     Aggregates: expr#sum(multiply(cs_quantity, cs_list_price)):=AggNull(sum)(expr#multiply(cs_quantity, cs_list_price)_2)
               │        └─ Projection est. ? rows
               │           │     Expressions: [c_first_name_2, c_last_name_2], expr#multiply(cs_quantity, cs_list_price)_2:=cs_quantity_1 * cs_list_price_1
               │           └─ Inner Join est. ? rows
               │              │     Condition: c_customer_sk_20 == c_customer_sk_23
               │              ├─ Repartition Exchange est. ? rows
               │              │  │     Partition by: {c_customer_sk_20}
               │              │  └─ Inner Join est. ? rows
               │              │     │     Condition: cs_item_sk_1 == i_item_sk_12
               │              │     ├─ Repartition Exchange est. ? rows
               │              │     │  │     Partition by: {cs_item_sk_1}
               │              │     │  └─ Inner Join est. ? rows
               │              │     │     │     Condition: cs_sold_date_sk_1 == d_date_sk_20
               │              │     │     ├─ Repartition Exchange est. ? rows
               │              │     │     │  │     Partition by: {cs_sold_date_sk_1}
               │              │     │     │  └─ Inner Join est. ? rows
               │              │     │     │     │     Condition: cs_bill_customer_sk_1 == c_customer_sk_20
               │              │     │     │     ├─ Repartition Exchange est. ? rows
               │              │     │     │     │  │     Partition by: {cs_bill_customer_sk_1}
               │              │     │     │     │  └─ Filter est. ? rows
               │              │     │     │     │     │     Condition: isNotNull(cs_item_sk_1) AND isNotNull(cs_bill_customer_sk_1)
               │              │     │     │     │     └─ TableScan tpcds.catalog_sales est. ? rows
               │              │     │     │     │              Outputs: cs_bill_customer_sk_1:=cs_bill_customer_sk, cs_item_sk_1:=cs_item_sk, cs_list_price_1:=cs_list_price, cs_quantity_1:=cs_quantity, cs_sold_date_sk_1:=cs_sold_date_sk
               │              │     │     │     └─ Repartition Exchange est. ? rows
               │              │     │     │        │     Partition by: {c_customer_sk_20}
               │              │     │     │        └─ Filter est. ? rows
               │              │     │     │           │     Condition: isNotNull(c_customer_sk_20)
               │              │     │     │           └─ TableScan tpcds.customer est. ? rows
               │              │     │     │                    Outputs: c_customer_sk_20:=c_customer_sk, c_first_name_2:=c_first_name, c_last_name_2:=c_last_name
               │              │     │     └─ Repartition Exchange est. ? rows
               │              │     │        │     Partition by: {d_date_sk_20}
               │              │     │        └─ Filter est. ? rows
               │              │     │           │     Condition: (d_year_20 = 2000) AND (d_moy_4 = 2)
               │              │     │           └─ TableScan tpcds.date_dim est. ? rows
               │              │     │                    Outputs: d_date_sk_20:=d_date_sk, d_moy_4:=d_moy, d_year_20:=d_year
               │              │     └─ Aggregating est. ? rows
               │              │        │     Group by: {i_item_sk_12}
               │              │        └─ Filter est. ? rows
               │              │           │     Condition: isNotNull(i_item_sk_12)
               │              │           └─ CTERef [0] est. ? rows
               │              └─ Aggregating est. ? rows
               │                 │     Group by: {c_customer_sk_23}
               │                 └─ Filter est. ? rows
               │                    │     Condition: isNotNull(c_customer_sk_23)
               │                    └─ CTERef [1] est. ? rows
               └─ MergingAggregated est. ? rows
                  └─ Repartition Exchange est. ? rows
                     │     Partition by: {c_first_name_5, c_last_name_5}
                     └─ Aggregating est. ? rows
                        │     Group by: {c_first_name_5, c_last_name_5}
                        │     Aggregates: expr#sum(multiply(ws_quantity, ws_list_price)):=AggNull(sum)(expr#multiply(ws_quantity, ws_list_price)_1)
                        └─ Projection est. ? rows
                           │     Expressions: [c_first_name_5, c_last_name_5], expr#multiply(ws_quantity, ws_list_price)_1:=ws_quantity_1 * ws_list_price_1
                           └─ Inner Join est. ? rows
                              │     Condition: c_customer_sk_24 == c_customer_sk_25
                              ├─ Repartition Exchange est. ? rows
                              │  │     Partition by: {c_customer_sk_24}
                              │  └─ Inner Join est. ? rows
                              │     │     Condition: ws_item_sk_1 == i_item_sk_13
                              │     ├─ Repartition Exchange est. ? rows
                              │     │  │     Partition by: {ws_item_sk_1}
                              │     │  └─ Inner Join est. ? rows
                              │     │     │     Condition: ws_sold_date_sk_1 == d_date_sk_23
                              │     │     ├─ Repartition Exchange est. ? rows
                              │     │     │  │     Partition by: {ws_sold_date_sk_1}
                              │     │     │  └─ Inner Join est. ? rows
                              │     │     │     │     Condition: ws_bill_customer_sk_1 == c_customer_sk_24
                              │     │     │     ├─ Repartition Exchange est. ? rows
                              │     │     │     │  │     Partition by: {ws_bill_customer_sk_1}
                              │     │     │     │  └─ Filter est. ? rows
                              │     │     │     │     │     Condition: isNotNull(ws_item_sk_1) AND isNotNull(ws_bill_customer_sk_1)
                              │     │     │     │     └─ TableScan tpcds.web_sales est. ? rows
                              │     │     │     │              Outputs: ws_bill_customer_sk_1:=ws_bill_customer_sk, ws_item_sk_1:=ws_item_sk, ws_list_price_1:=ws_list_price, ws_quantity_1:=ws_quantity, ws_sold_date_sk_1:=ws_sold_date_sk
                              │     │     │     └─ Repartition Exchange est. ? rows
                              │     │     │        │     Partition by: {c_customer_sk_24}
                              │     │     │        └─ Filter est. ? rows
                              │     │     │           │     Condition: isNotNull(c_customer_sk_24)
                              │     │     │           └─ TableScan tpcds.customer est. ? rows
                              │     │     │                    Outputs: c_customer_sk_24:=c_customer_sk, c_first_name_5:=c_first_name, c_last_name_5:=c_last_name
                              │     │     └─ Repartition Exchange est. ? rows
                              │     │        │     Partition by: {d_date_sk_23}
                              │     │        └─ Filter est. ? rows
                              │     │           │     Condition: (d_moy_7 = 2) AND (d_year_23 = 2000)
                              │     │           └─ TableScan tpcds.date_dim est. ? rows
                              │     │                    Outputs: d_date_sk_23:=d_date_sk, d_moy_7:=d_moy, d_year_23:=d_year
                              │     └─ Aggregating est. ? rows
                              │        │     Group by: {i_item_sk_13}
                              │        └─ Filter est. ? rows
                              │           │     Condition: isNotNull(i_item_sk_13)
                              │           └─ CTERef [0] est. ? rows
                              └─ Aggregating est. ? rows
                                 │     Group by: {c_customer_sk_25}
                                 └─ Filter est. ? rows
                                    │     Condition: isNotNull(c_customer_sk_25)
                                    └─ CTERef [1] est. ? rows
CTEDef [1]
Inner Join est. ? rows
│     Condition: 
│     Filter: `expr#sum(multiply(ss_quantity, ss_sales_price))_20` > ('0.500000' * `expr#max(csales)_9`)
├─ MergingAggregated est. ? rows
│  └─ Repartition Exchange est. ? rows
│     │     Partition by: {c_customer_sk_21}
│     └─ Aggregating est. ? rows
│        │     Group by: {c_customer_sk_21}
│        │     Aggregates: expr#sum(multiply(ss_quantity, ss_sales_price))_20:=AggNull(sum)(expr#multiply(ss_quantity, ss_sales_price)_18)
│        └─ Projection est. ? rows
│           │     Expressions: [c_customer_sk_21], expr#multiply(ss_quantity, ss_sales_price)_18:=ss_quantity_20 * ss_sales_price_20
│           └─ Inner Join est. ? rows
│              │     Condition: ss_customer_sk_20 == c_customer_sk_21
│              ├─ Repartition Exchange est. ? rows
│              │  │     Partition by: {ss_customer_sk_20}
│              │  └─ Filter est. ? rows
│              │     │     Condition: isNotNull(ss_customer_sk_20)
│              │     └─ TableScan tpcds.store_sales est. ? rows
│              │              Outputs: ss_customer_sk_20:=ss_customer_sk, ss_quantity_20:=ss_quantity, ss_sales_price_20:=ss_sales_price
│              └─ Repartition Exchange est. ? rows
│                 │     Partition by: {c_customer_sk_21}
│                 └─ Filter est. ? rows
│                    │     Condition: isNotNull(c_customer_sk_21)
│                    └─ TableScan tpcds.customer est. ? rows
│                             Outputs: c_customer_sk_21:=c_customer_sk
└─ Broadcast Exchange est. ? rows
   └─ MergingAggregated est. ? rows
      └─ Gather Exchange est. ? rows
         └─ Aggregating est. ? rows
            │     Group by: {}
            │     Aggregates: expr#max(csales)_9:=AggNull(max)(expr#sum(multiply(ss_quantity, ss_sales_price))_21)
            └─ Projection est. ? rows
               │     Expressions: [expr#sum(multiply(ss_quantity, ss_sales_price))_21]
               └─ MergingAggregated est. ? rows
                  └─ Repartition Exchange est. ? rows
                     │     Partition by: {c_customer_sk_22}
                     └─ Aggregating est. ? rows
                        │     Group by: {c_customer_sk_22}
                        │     Aggregates: expr#sum(multiply(ss_quantity, ss_sales_price))_21:=AggNull(sum)(expr#multiply(ss_quantity, ss_sales_price)_19)
                        └─ Projection est. ? rows
                           │     Expressions: [c_customer_sk_22], expr#multiply(ss_quantity, ss_sales_price)_19:=ss_quantity_21 * ss_sales_price_21
                           └─ Inner Join est. ? rows
                              │     Condition: ss_sold_date_sk_21 == d_date_sk_22
                              ├─ Repartition Exchange est. ? rows
                              │  │     Partition by: {ss_sold_date_sk_21}
                              │  └─ Inner Join est. ? rows
                              │     │     Condition: ss_customer_sk_21 == c_customer_sk_22
                              │     ├─ Repartition Exchange est. ? rows
                              │     │  │     Partition by: {ss_customer_sk_21}
                              │     │  └─ TableScan tpcds.store_sales est. ? rows
                              │     │           Outputs: ss_customer_sk_21:=ss_customer_sk, ss_quantity_21:=ss_quantity, ss_sales_price_21:=ss_sales_price, ss_sold_date_sk_21:=ss_sold_date_sk
                              │     └─ Repartition Exchange est. ? rows
                              │        │     Partition by: {c_customer_sk_22}
                              │        └─ TableScan tpcds.customer est. ? rows
                              │                 Outputs: c_customer_sk_22:=c_customer_sk
                              └─ Repartition Exchange est. ? rows
                                 │     Partition by: {d_date_sk_22}
                                 └─ Filter est. ? rows
                                    │     Condition: d_year_22 IN (2000, 2001, 2002, 2003)
                                    └─ TableScan tpcds.date_dim est. ? rows
                                             Outputs: d_date_sk_22:=d_date_sk, d_year_22:=d_year
CTEDef [0]
Repartition Exchange est. ? rows
│     Partition by: {i_item_sk_11}
└─ Projection est. ? rows
   │     Expressions: [i_item_sk_11]
   └─ Filter est. ? rows
      │     Condition: `expr#count()_11` > 4
      └─ MergingAggregated est. ? rows
         └─ Repartition Exchange est. ? rows
            │     Partition by: {d_date_15, expr#substring(i_item_desc, 1, 30)_11, i_item_sk_11}
            └─ Aggregating est. ? rows
               │     Group by: {d_date_15, expr#substring(i_item_desc, 1, 30)_11, i_item_sk_11}
               │     Aggregates: expr#count()_11:=AggNull(count)()
               └─ Projection est. ? rows
                  │     Expressions: [d_date_15, i_item_sk_11], expr#substring(i_item_desc, 1, 30)_11:=substring(i_item_desc_9, 1, 30)
                  └─ Inner Join est. ? rows
                     │     Condition: ss_item_sk_11 == i_item_sk_11
                     ├─ Repartition Exchange est. ? rows
                     │  │     Partition by: {ss_item_sk_11}
                     │  └─ Inner Join est. ? rows
                     │     │     Condition: ss_sold_date_sk_19 == d_date_sk_21
                     │     ├─ Repartition Exchange est. ? rows
                     │     │  │     Partition by: {ss_sold_date_sk_19}
                     │     │  └─ Filter est. ? rows
                     │     │     │     Condition: isNotNull(ss_item_sk_11)
                     │     │     └─ TableScan tpcds.store_sales est. ? rows
                     │     │              Outputs: ss_item_sk_11:=ss_item_sk, ss_sold_date_sk_19:=ss_sold_date_sk
                     │     └─ Repartition Exchange est. ? rows
                     │        │     Partition by: {d_date_sk_21}
                     │        └─ Filter est. ? rows
                     │           │     Condition: d_year_21 IN (2000, 2001, 2002, 2003)
                     │           └─ TableScan tpcds.date_dim est. ? rows
                     │                    Outputs: d_date_15:=d_date, d_date_sk_21:=d_date_sk, d_year_21:=d_year
                     └─ Repartition Exchange est. ? rows
                        │     Partition by: {i_item_sk_11}
                        └─ Filter est. ? rows
                           │     Condition: isNotNull(i_item_sk_11)
                           └─ TableScan tpcds.item est. ? rows
                                    Outputs: i_item_desc_9:=i_item_desc, i_item_sk_11:=i_item_sk
note: CTE(Common Table Expression) is applied for 4 times.
